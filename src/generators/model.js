#!/usr/bin/env node

// Arguments validator.
const { ensure } = require('nodester/validators/arguments');

const {
	exposeGeneratorTools,
	lowercaseFirstLetter
} = require('./common');


module.exports = function generateNewModel(nodesterConfigs, modelName) {
	try {
		ensure(modelName, 'string,required', 'modelName');

		const {
			dirs,
			fs,
			Path
		} = exposeGeneratorTools(nodesterConfigs);

		let modelCreated = false;
		let controllerCreated = false;
		let facadeCreated = false;
		
		const modelNameLowercased = lowercaseFirstLetter(modelName);


		// Write to /models directory, if doesn't exist:
		const modelPath = Path.join(dirs.models, `${ modelName }.js`);
		if (fs.existsSync(modelPath) === false) {
			// Create it:
			fs.writeFileSync(
				modelPath,
				_modelContent(modelName, modelNameLowercased)
			);

			modelCreated = true;
		}

		// Get newly created model.
		const Model = require(modelPath);
		// Get plural name:
		const modelNamePlural = Model.options.name.plural;
		const modelNamePluralLowercased = lowercaseFirstLetter(modelNamePlural);


		// Write to /controllers directory, if doesn't exist:
		const controllerPath = Path.join(dirs.controllers, `${ modelNamePlural }.controller.js`);
		if (fs.existsSync(controllerPath) === false) {
			// Create it:
			const controllerName = `${ modelNamePlural }Controller`;
			fs.writeFileSync(
				controllerPath,
				_controllerContent(controllerName, modelNamePluralLowercased)
			);

			controllerCreated = true;
		}


		// Write to /facades directory, if doesn't exist:
		const facadePath = Path.join(dirs.facades, `${ modelNamePluralLowercased }.js`);
		if (fs.existsSync(facadePath) === false) {
			// Create it:
			fs.writeFileSync(
				facadePath,
				_facadeContent(modelName, modelNameLowercased, modelNamePlural)
			);

			facadeCreated = true;
		}

		console.info(`Model ${ modelName }:\n`,
			`
• Model created: ${ modelCreated };
• Controller created: ${ controllerCreated };
• Facade created: ${ facadeCreated };
			`
		);
		
		// End.
		process.exit(0);
	}
	catch(error) {
		console.error('Fatal Error', error);
	}
};


function _modelContent(modelName, modelNameLowercased) {
	return (
`// ORM.
const DatabaseConnection = require('#db');
// Definition (nodester).
const defineModel = require('nodester/models/define');


const ${ modelNameLowercased } = defineModel(DatabaseConnection, '${ modelName }',
	(DataTypes) => ({
		id: {
			type: DataTypes.INTEGER.UNSIGNED,
			allowNull: false,
			primaryKey: true,
			autoIncrement: true,
			_autoGenerated: true
		},
	}),
	{
		// Allow only "soft" delete.
		paranoid: true
	}
);

// Hooks:
${ modelNameLowercased }.associate = (models) => {
}

module.exports = ${ modelNameLowercased };
`
	);
}

function _controllerContent(controllerName, modelNamePluralLowercased) {
	return (
`const {
	withDefaultCRUD,
	withDefaultErrorProcessing
} = require('nodester/controllers/mixins');

const ${ modelNamePluralLowercased }Facade = require('#facades/${ modelNamePluralLowercased }');


module.exports = function ${ controllerName }() {
	withDefaultCRUD(this, {
		facade: ${ modelNamePluralLowercased }Facade
	});
	withDefaultErrorProcessing(this);
}
`
	);
}

function _facadeContent(modelName, modelNameLowercased, modelNamePlural) {
	return(
`const {
	withDefaultCRUD
} = require('nodester/facades/mixins');

// Model.
const ${ modelNameLowercased } = require('#models/${ modelName }');


module.exports = function ${ modelNamePlural }Facade() {
	withDefaultCRUD(this, {
		model: ${ modelNameLowercased }
	});
}
`
	);
}
